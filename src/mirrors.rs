//! Not all types generated by substrate macros are Serialize.
//! This module provides serializable mirrors of substrate types.
//! Each mirror type implements Serialize + DeserializeOwned and can be converted to and from
//! its reflection.

use dock_testnet_runtime as runtime;
use runtime::Runtime;
use serde::{de::DeserializeOwned, Deserialize, Serialize};

type RuntimeHash = <Runtime as frame_system::Trait>::Hash;
type BlockNumber = <Runtime as frame_system::Trait>::BlockNumber;
type Balance = u128;

/// A serializable representaion of some other type.
trait Mirror: Serialize + DeserializeOwned {
    type Reflection;
    fn into_reflection(self) -> Self::Reflection;
    fn from_reflection(other: Self::Reflection) -> Self;
}

#[derive(Serialize, Deserialize)]
pub enum Call {
    System(SystemCall),
    Timestamp(TimestampCall),
    Grandpa(GrandpaCall),
    Balances(BalancesCall),
    Sudo(SudoCall),
    DIDModule(DidCall),
    Revoke(RevokeCall),
    BlobStore(BlobCall),
    Collective(CollectiveCall),
}

impl Mirror for Call {
    type Reflection = runtime::Call;

    fn into_reflection(self) -> Self::Reflection {
        // match other {
        //     Call::System(a) => runtime::Call::System(a),
        //     Call::RandomnessCollectiveFlip(a) => runtime::Call::RandomnessCollectiveFlip(a),
        //     Call::Timestamp(a) => runtime::Call::Timestamp(a),
        //     Call::Grandpa(a) => runtime::Call::Grandpa(a),
        //     Call::Balances(a) => runtime::Call::Balances(a),
        //     Call::Sudo(a) => runtime::Call::Sudo(a),
        //     Call::DIDModule(a) => runtime::Call::DIDModule(a),
        //     Call::Revoke(a) => runtime::Call::Revoke(a),
        //     Call::BlobStore(a) => runtime::Call::BlobStore(a),
        //     Call::Collective(a) => runtime::Call::Collective(a),
        // }
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        // match other {
        //     runtime::Call::System(a) => Call::System(a),
        //     runtime::Call::RandomnessCollectiveFlip(a) => Call::RandomnessCollectiveFlip(a),
        //     runtime::Call::Timestamp(a) => Call::Timestamp(a),
        //     runtime::Call::Grandpa(a) => Call::Grandpa(a),
        //     runtime::Call::Balances(a) => Call::Balances(a),
        //     runtime::Call::Sudo(a) => Call::Sudo(a),
        //     runtime::Call::DIDModule(a) => Call::DIDModule(a),
        //     runtime::Call::Revoke(a) => Call::Revoke(a),
        //     runtime::Call::BlobStore(a) => Call::BlobStore(a),
        //     runtime::Call::Collective(a) => Call::Collective(a),
        // }
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub enum SystemCall {
    FillBlock(sp_runtime::Perbill),
    Remark(Vec<u8>),
    SetHeapPages(u64),
    SetCode(Vec<u8>),
    SetCodeWithoutChecks(Vec<u8>),
    SetChangesTrieConfig(Option<sp_core::ChangesTrieConfiguration>),
    SetStorage(Vec<frame_system::KeyValue>),
    KillStorage(Vec<frame_system::Key>),
    KillPrefix(frame_system::Key, u32),
    Suicide(),
}

impl Mirror for SystemCall {
    type Reflection = frame_system::Call<Runtime>;

    fn into_reflection(self) -> Self::Reflection {
        match self {
            Self::FillBlock(a) => Self::Reflection::fill_block(a),
            Self::Remark(a) => Self::Reflection::remark(a),
            Self::SetHeapPages(a) => Self::Reflection::set_heap_pages(a),
            Self::SetCode(a) => Self::Reflection::set_code(a),
            Self::SetCodeWithoutChecks(a) => Self::Reflection::set_code_without_checks(a),
            Self::SetChangesTrieConfig(a) => Self::Reflection::set_changes_trie_config(a),
            Self::SetStorage(a) => Self::Reflection::set_storage(a),
            Self::KillStorage(a) => Self::Reflection::kill_storage(a),
            Self::KillPrefix(a, b) => Self::Reflection::kill_prefix(a, b),
            Self::Suicide() => Self::Reflection::suicide(),
        }
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub enum TimestampCall {
    Set(bool),
}

impl Mirror for TimestampCall {
    type Reflection = pallet_timestamp::Call<Runtime>;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub enum GrandpaCall {
    ReportEquivocation(EquivocationProof, SupportVoid),
}

impl Mirror for GrandpaCall {
    type Reflection = pallet_grandpa::Call<Runtime>;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub enum SupportVoid {}

impl Mirror for SupportVoid {
    type Reflection = frame_support::Void;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub struct EquivocationProof {
    set_id: u64,
    equivocation: FinalityGrandpaEquivocation,
}

#[derive(Serialize, Deserialize)]
pub enum FinalityGrandpaEquivocation {
    Prevote(GrandpaEquivocation<GrandpaPrevote>),
    Precommit(GrandpaEquivocation<GrandpaPrecommit>),
}

#[derive(Serialize, Deserialize)]
pub struct GrandpaEquivocation<V> {
    pub round_number: u64,
    pub identity: GrandpaAuthorityId,
    pub first: (V, GrandpaAuthoritySignature),
    pub second: (V, GrandpaAuthoritySignature),
}

#[derive(Serialize, Deserialize)]
pub struct GrandpaPrecommit {}

impl Mirror for GrandpaPrecommit {
    type Reflection = finality_grandpa::Precommit<RuntimeHash, BlockNumber>;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub struct GrandpaPrevote {}

impl Mirror for GrandpaPrevote {
    type Reflection = finality_grandpa::Prevote<RuntimeHash, BlockNumber>;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub struct GrandpaAuthorityId {}

impl Mirror for GrandpaAuthorityId {
    type Reflection = sp_finality_grandpa::AuthorityId;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub struct GrandpaAuthoritySignature {}

impl Mirror for GrandpaAuthoritySignature {
    type Reflection = sp_finality_grandpa::AuthoritySignature;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub enum BalancesCall {
    Transfer(AccountId, Balance),
    SetBalance(AccountId, Balance, Balance),
    ForceTransfer(AccountId, AccountId, Balance),
    TransferKeepAlive(AccountId, Balance),
}

impl Mirror for BalancesCall {
    type Reflection = pallet_balances::Call<Runtime>;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub struct AccountId(pub [u8; 32]);

impl Mirror for AccountId {
    type Reflection = sp_core::crypto::AccountId32;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub enum SudoCall {
    Sudo(Box<Call>),
    SudoUncheckedWeight(Box<Call>, u64),
    SetKey(AccountId),
    SudoAs(AccountId, Box<Call>),
}

impl Mirror for SudoCall {
    type Reflection = pallet_sudo::Call<Runtime>;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub enum DidCall {
    New(runtime::did::Did, KeyDetail),
    UpdateKey(KeyUpdate, DidSignature),
    Remove(DidRemoval, DidSignature),
}

impl Mirror for DidCall {
    type Reflection = runtime::did::Call<Runtime>;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub struct KeyDetail {}

impl Mirror for KeyDetail {
    type Reflection = runtime::did::KeyDetail;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub struct KeyUpdate {}

impl Mirror for KeyUpdate {
    type Reflection = runtime::did::KeyUpdate;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub struct DidRemoval {}

impl Mirror for DidRemoval {
    type Reflection = runtime::did::DidRemoval;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub struct DidSignature {}

impl Mirror for DidSignature {
    type Reflection = runtime::did::DidSignature;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub enum RevokeCall {
    NewRegistry(runtime::revoke::RevokeId, RevocationRegistry),
    Revoke(Revoke, PAuth),
    Unrevoke(UnRevoke, PAuth),
    RemoveRegistry(RemoveRegistry, PAuth),
}

impl Mirror for RevokeCall {
    type Reflection = runtime::revoke::Call<Runtime>;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub struct Revoke {}

impl Mirror for Revoke {
    type Reflection = runtime::revoke::Revoke;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub struct RevocationRegistry {}

impl Mirror for RevocationRegistry {
    type Reflection = runtime::revoke::Registry;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub struct PAuth {}

impl Mirror for PAuth {
    type Reflection = runtime::revoke::PAuth;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub struct UnRevoke {}

impl Mirror for UnRevoke {
    type Reflection = runtime::revoke::UnRevoke;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub struct RemoveRegistry {}

impl Mirror for RemoveRegistry {
    type Reflection = runtime::revoke::RemoveRegistry;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub enum BlobCall {
    New(Blob, DidSignature),
}

impl Mirror for BlobCall {
    type Reflection = runtime::blob::Call<Runtime>;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub struct Blob {}

impl Mirror for Blob {
    type Reflection = runtime::blob::Blob;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[derive(Serialize, Deserialize)]
pub enum CollectiveCall {
    SetMembers(Vec<AccountId>, Option<AccountId>, u32),
    Execute(Box<Call>, u32),
    Propose(u32, Box<Call>, u32),
    Vote(RuntimeHash, u32, bool),
    Close(RuntimeHash, u32, u64, u32),
}

impl Mirror for CollectiveCall {
    type Reflection = pallet_collective::Call<Runtime>;

    fn into_reflection(self) -> Self::Reflection {
        unimplemented!()
    }

    fn from_reflection(_other: Self::Reflection) -> Self {
        unimplemented!()
    }
}

#[cfg(test)]
mod test {
    use super::*;

    // #[test]
    // fn to_from_call() {
    //     let call: runtime::Call = runtime::Call::System(frame_system::Call::set_code(vec![]));
    //     let call: Call = Call::from_reflection(call);
    //     let call: runtime::Call = call.into_reflection();
    // }
}
